////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  Name: DHDataReader.cxx                                                    //
//                                                                            //
//  Creator: Andrew Hard                                                      //
//  Email: ahard@cern.ch                                                      //
//  Date: 09/07/2015                                                          //
//                                                                            //
//  Retrieves data and MC sets for workspace creation.                        //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include "DHDataReader.h"

/**
   -----------------------------------------------------------------------------
   Initialize the class for checking job statuses.
   @param observable - the mass observable for the datasets.
*/
DHDataReader::DHDataReader(RooRealVar *observable) {
  
  if (observable) setMassObservable(observable);
  else {// construct diphoton invariant mass observable by default.
    RooRealVar *m_yy = new RooRealVar("m_yy", "m_yy", DHAnalysis::DHMyyRangeLo,
				      DHAnalysis::DHMyyRangeHi);
    setMassObservable(m_yy);
  }
  
}

/**
   -----------------------------------------------------------------------------
*/
RooDataSet* DHDataReader::binTheData(RooDataSet *dataUnbinned, int nBins) {
  
  // Create a binned observed data set:
  RooArgSet* obsPlusWt = new RooArgSet();
  RooRealVar wt("wt","wt",1);
  obsPlusWt->add(wt);
  obsPlusWt->add(*m_observable);
  
  // Create a histogram to store binned data:
  TH1F* dataHist = new TH1F("dataHist", "dataHist", nBins, 
			    m_observable->getMin(), m_observable->getMax());
  for (int i_e = 0; i_e < dataUnbinned->numEntries(); i_e++) {
    dataUnbinned->get(i_e);
    dataHist->Fill(m_observable->getVal());
  }
  
  // Fill obsdatabinned dataset with binned data:
  TString unbinnedName = dataUnbinned->GetName();
  TString binnedName = Form("%s_binned", unbinnedName.Data());
  RooDataSet *obsDataBinned = new RooDataSet(binnedName, binnedName,
					     *obsPlusWt, RooFit::WeightVar(wt));
  for (int i_b = 1; i_b < dataHist->GetNbinsX(); i_b++) {
    // 240 bins -> 0.25 GeV per bin
    double massVal = dataHist->GetBinCenter(i_b);
    double weightVal = dataHist->GetBinContent(i_b);
    m_observable->setVal(massVal);
    wt.setVal(weightVal);
    obsDataBinned->add(RooArgSet(*m_observable, wt), weightVal);
  }
}

/**
   -----------------------------------------------------------------------------
*/
RooDataSet* DHDataReader::loadNonResData(TString cateName) {
  
  int cateOfInterest = DHAnalysis::cateNameToIndex(cateName);
  
  // Create a RooDataSet to return:
  RooDataSet *currData = new RooDataSet(Form("obsData_%s", cateName.Data()),
					Form("obsData_%s", cateName.Data()),
					RooArgSet(*m_observable));
  // Load the TTree from file:
  TFile inputFile(DHAnalysis::nonResInput);
  TTree *tree = (TTree*)inputFile.Get("nonres");
  double gg_mass; int catNonRes_idx;
  tree->SetBranchAddress("gg_mass", &gg_mass);
  tree->SetBranchAddress("catNonRes_idx", &catNonRes_idx);
  
  // Loop over TTree contents:
  for (int index = 0; index < tree->GetEntries(); index++) {
    tree->GetEntry(index);
    
    // Cut to make sure we are using the proper category:
    if (catNonRes_idx != cateOfInterest) continue;
    
    // Add points to the dataset:
    m_observable->setVal(gg_mass);
    currData->add(*m_observable);
  }
  return currData;
}

/**
   -----------------------------------------------------------------------------
*/
RooDataSet* DHDataReader::loadResData(TString cateName) {
  // Create a RooDataSet to return:
  RooDataSet *currData = new RooDataSet(Form("obsData_%s", cateName.Data()),
					Form("obsData_%s", cateName.Data()),
					RooArgSet(*m_observable));
  // Load the TTree from file:
  TFile inputFile(DHAnalysis::resData);
  TTree *tree = (TTree*)inputFile.Get("photon");
  double gg_jj_mass; bool cut_jj; bool blind;
  tree->SetBranchAddress("gg_jj_mass", &gg_jj_mass);
  tree->SetBranchAddress("cut_jj", &cut_jj);
  tree->SetBranchAddress("blind", &blind);
  
  // Loop over TTree contents:
  for (int index = 0; index < tree->GetEntries(); index++) {
    tree->GetEntry(index);
    
    // Apply a few cuts:
    if (!cut_jj || blind) continue;
    
    // Add points to the dataset:
    m_observable->setVal(gg_jj_mass);
    currData->add(*m_observable);
  }
  return currData;
}

/**
   -----------------------------------------------------------------------------
*/
void DHDataReader::setMassObservable(RooRealVar *observable) {
  m_observable = observable;
}
